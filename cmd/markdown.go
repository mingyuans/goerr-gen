package main

import (
	"bytes"
	"fmt"
	"html/template"
	"log"
	"os"
	"strings"
)

var defaultCodeDocPrefix = `
# Error Codes

⚠️⚠️System error code list, generated by the {{.}}codegen -doc{{.}} command, do not make any changes to this file.⚠️⚠️

## Feature Description

If there is a {{.}}code{{.}} field in the response, and the value of {{.}}code{{.}} != 0, it indicates that the API interface call failed. For example:

{{.}}{{.}}{{.}}json
{
  "code": 10001000,
  "message": "Database error",
  "errors": [],
  "request_id": "67575010234d4f9f9adaca7c26e7e709"
}
{{.}}{{.}}{{.}}

In the above return, {{.}}code{{.}} represents the error code, {{.}}message{{.}} represents the specific information of the error. {{.}}errors{{.}} represents the debug information of the error. {{.}}request_id{{.}} represents the id of this request, which can be provided to service developers for troubleshooting and tracking.
Each error also corresponds to an HTTP status code, such as the above error code corresponds to HTTP status code 500 (Internal Server Error).

## Rules for Code
| First three digits (100) | Middle two digits (01) | Last three digits (000) |
| ---------- | ---- | --------- |
| System code | Module code | Specific error code |


## Error Code List

The list of error codes supported by this system is as follows:

| Identifier | Code | HTTP Code | Message |
| ---------- | ---- | --------- | ----------- |
`

type docFileGenerator struct {
	buf bytes.Buffer // Accumulated output.
}

func GenerateDocs(arg Arg, sets []ErrorCodePackage) error {
	gen := docFileGenerator{}
	return gen.generateDocs(arg, sets)
}

// generateDocs produces error code markdown document for the named type.
func (g *docFileGenerator) generateDocs(arg Arg, sets []ErrorCodePackage) error {
	values := make([]Value, 0)

	for _, set := range sets {
		if len(set.codes) == 0 {
			continue
		}
		values = append(values, set.codes...)
	}

	var docPrefix = getDocPrefixFromTemplate(arg)
	tmpl, _ := template.New("doc").Parse(docPrefix)
	var buf bytes.Buffer
	_ = tmpl.Execute(&buf, "`")

	// Generate code that will fail if the constants change value.
	g.Printf(buf.String())
	for _, v := range values {
		if !strings.HasPrefix(strings.ToLower(v.name), "err") && v.name != "Success" {
			continue
		}
		code, description := v.ParseComment()
		g.Printf("| %s | %s | %s | %s |\n", v.name, v.value, code, description)
	}
	g.Printf("\n")
	return writeToFile(g.buf.Bytes(), strings.TrimSpace(arg.DocOutput))
}

func (g *docFileGenerator) Printf(format string, args ...interface{}) {
	_, _ = fmt.Fprintf(&g.buf, format, args...)
}

func getDocPrefixFromTemplate(arg Arg) string {
	if arg.DocTemplate == "" {
		return defaultCodeDocPrefix
	}

	content, err := os.ReadFile(arg.DocTemplate)
	if err != nil {
		log.Fatalf("failed to read template file: %v", err)
	}
	return string(content)
}
